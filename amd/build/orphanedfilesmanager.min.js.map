{"version":3,"file":"orphanedfilesmanager.min.js","sources":["../src/orphanedfilesmanager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Storage helper for the Moodle Tiny orphanedfiles plugin.\n *\n * @module     tiny_orphanedfiles/plugin\n * @copyright  2023 Andreas Siebel <andreas.siebel@schulportal.hessen.de>\n * @copyright  2023 Andreas Schenkel <andreas.schenkel@schulportal.hessen.de>\n * @author     2023 Andreas Siebel <andreas.siebel@schulportal.hessen.de>\n * @author     2023 Andreas Schenkel <andreas.schenkel@schulportal.hessen.de>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as Options from \"./options\";\nimport Templates from 'core/templates';\nimport {exception as displayException} from 'core/notification';\nimport {deleteDraftFiles, getAllDraftFiles} from \"./repository\";\n//import {getShowReferencecount} from \"./options\";\n\n/**\n * OrphanedfilesManager is created in main.js\n */\nexport default class OrphanedfilesManager {\n    constructor(params, editor) {\n        this.editor = editor;\n        this.elementId = editor.id;\n        this.editorContainer = editor.editorContainer;\n        // Read from options.js\n        this.draftItemId = params.draftItemId;\n        this.userContextId = params.userContextId; // user context from moodle\n        // Read websitesetting from options.js\n        this.showReferenceCountEnabled = params.showReferenceCountEnabled;\n        this.orphanedFilesCounterOnly = params.orphanedFilesCounterOnly;\n        this.wwwRoot = params.wwwRoot;\n        this.baseUrl = {};\n        this.allFilesSet = new Set(); // files\n        this.usedFilesSet = new Set(); // Set of file strings(!)\n        this.orphanedFilesSet = new Set(); // files\n        this.deletedFilesSet = new Set(); // files\n        this.oldOrphanedFilesSet = new Set();\n        //this.changed = false;\n    }\n\n    /**\n     * Creates the wrapper for the Orphaned files area.\n     * The wrapper is a `div`-Element with id js-orphaned-wrapper-[elementid]\n     * and class js-orphaned-wrapper\n     */\n    createOrphanedArea() {\n        this.orphanedArea = document.createElement('div');\n        this.orphanedArea.id = 'tiny-js-orphaned-wrapper-' + this.elementId;\n        this.orphanedArea.className = 'tiny-orphaned-js-orphaned-wrapper';\n        this.orphanedArea.className = 'tiny-orphaned';\n        this.editorContainer.after(this.orphanedArea);\n\n        this.headerDiv = document.createElement('div');\n        this.headerDiv.id = `has-orphaned-files-${this.elementId}`;\n        this.headerDiv.classList.add(`hidden`);\n        this.headerDiv.innerHTML = '⟳ ... LOAD \"orphaned files indicator\", 8, 1';\n        this.orphanedArea.appendChild(this.headerDiv);\n\n        this.bodyDiv = document.createElement('div');\n        this.bodyDiv.id = `orphaned-files-${this.elementId}`;\n        // Template will be inserted into this DOM element.\n        this.bodyDiv.classList.add(`orphaned-files-content`);\n        this.bodyDiv.classList.add(`orphaned-files-content-${this.elementId}`);\n        this.bodyDiv.classList.add(`hidden`);\n        this.orphanedArea.appendChild(this.bodyDiv);\n\n    }\n\n    updateAllFiles() {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const result = await this.getAllDraftFilesInSubdirectories();\n                this.allFilesSet = new Set([...result]); // generate set from resultArray\n                resolve(result); // Erfolgreich aufgelöst\n            } catch (error) {\n                reject(error); // Bei einem Fehler abgelehnt\n            }\n        });\n    }\n\n    /**\n     * Returns the used Files as array\n     * Update used Files is called *after* UpdateAllFiles\n     *\n     * @returns {array}\n     */\n    updateUsedFiles() {\n        return new Promise(async (resolve) => {\n            const editorContent = this.editor.getContent();\n            const baseUrl = `${this.wwwRoot}/draftfile.php/${this.userContextId}/user/draft/${this.draftItemId}/`;\n            const pattern = new RegExp(\"[\\\"']\" + baseUrl.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&') +\n                \"(?<filename>.+?)[\\\\?\\\"']\", 'gm');\n            //Get all used files in editor by searching editor content for filepatterns\n            const _usedFilesSet = new Set([...editorContent.matchAll(pattern)].map((match) => '/' +\n                decodeURIComponent(match.groups.filename)));\n            let i = 1;\n            // Get *files* from filename and filepath strings in editor (by filtering allFilesSet\n            for (const file of this.allFilesSet) {\n                file.className = 'file-' + i;\n                // Add individual information about the file e.g. dimensions, formated last modified date, ...\n                if (file.image_width && file.image_height ) {\n                    file.dimensions = `${file.image_width}✕${file.image_height}`;\n                } else {\n                    file.dimensions = '';\n                }\n                const newDate = new Date(file.datemodified * 1000);\n                const dateString = newDate.toLocaleString();\n                file.datemodified_formated = dateString;\n\n                if (_usedFilesSet.has(file.filepath + file.filename)) {\n                    this.usedFilesSet.add(file);\n                }\n                i = i + 1;\n            }\n            resolve(); // Erfolgreich aufgelöst\n        });\n    }\n\n    /**\n     * Compares to allFiles and usedFiles to find all orphaned files\n     *\n     * @returns {*[]}\n     */\n    updateOrphanedFiles() {\n        return new Promise((resolve) => {\n            this.oldOrphanedFilesSet = this.orphanedFilesSet;\n            this.orphanedFilesSet = new Set([...this.allFilesSet].filter(element => !this.usedFilesSet.has(element)));\n            resolve();\n        });\n    }\n\n    /**\n     * Gets all draft files in editor context in a given directory and all\n     * subdirectories.\n     *\n     * @returns {string[]} A list of files\n     */\n    async getAllDraftFilesInSubdirectories() {\n        const draftItemId = Options.getDraftItemId(this.editor);\n        const fileObject = await getAllDraftFiles(draftItemId);\n        return JSON.parse(fileObject.files);\n    }\n\n    deleteSelectedFiles(files) {\n        const draftItemId = Options.getDraftItemId(this.editor);\n        // call deleteDraftFiles from repository.js\n        deleteDraftFiles(draftItemId, files).then(() => {\n            // Mark deleted files and render body.\n            for (const file of files) {\n                this.deletedFilesSet.add(this._get_file_identifier(file));\n            }\n            this.update();\n        });\n    }\n\n    update() {\n        this.updateAllFiles().then(() => {\n            return this.updateUsedFiles();\n        }).then(() => {\n            return this.updateOrphanedFiles();\n        }).then(() => {\n                this.bodyDiv.classList.remove('hidden');\n                this.renderBody();\n        });\n    }\n\n    renderBody() {\n        const numberoforphanedfiles = this.orphanedFilesSet.size;\n        if (numberoforphanedfiles !== 0) {\n            var orphanedfilescounteronly = this.orphanedFilesCounterOnly;\n            if (orphanedfilescounteronly) {\n                const context = {\n                    // Data to be rendered\n                    numberoforphanedfiles: numberoforphanedfiles,\n                };\n                Templates.renderForPromise('tiny_orphanedfiles/orphanedfilescounteronly', context).then(({html, js}) => {\n                    Templates.replaceNodeContents(`.orphaned-files-content-${this.elementId}`, html, js);\n                });\n            } else {\n                const websitesettings = Array();\n                // Just for documentation purpose: We can access settings by two different ways.\n                // We can access Options-Object or the data stored during construction.\n                websitesettings['showreferencecountenabled'] = this.showReferenceCountEnabled;\n                websitesettings['orphanedfilescounteronly'] = this.orphanedFilesCounterOnly;\n                const context = {\n                    // Data to be rendered\n                    orphanedFiles: Array.from(this.orphanedFilesSet),\n                    numberoforphanedfiles: numberoforphanedfiles,\n                    websitesettings: websitesettings,\n                };\n                // Display Orphaned-Files-Table\n                Templates.renderForPromise('tiny_orphanedfiles/orphanedfiles', context).then(({html, js}) => {\n                    Templates.replaceNodeContents(`.orphaned-files-content-${this.elementId}`, html, js);\n                }).then(() => {\n                    // Add Listener to dynamic items in Orphaned-Files-Table e.g. Delete Buttons\n                    return this.registerListener(Array.from(this.orphanedFilesSet));\n                }).catch((error) => displayException(error));\n            }\n        } else {\n            // Todo: IF number orphanedfiles is 0 but the user has used the undo then there is still a table\n            // in the dom that contains a list of files but this tablelist is now set as hidden.\n            // Maybe we better also remove this content from the dom.\n            this.bodyDiv.classList.add('hidden');\n        }\n        return null;\n    }\n\n    /**\n     * Get the file identifier with the correct draftidemid tha is used by the editor.\n     *\n     * @param {array} file The file we need the unique fileidentifier from.\n     * @returns {string}\n     * @private\n     */\n    _get_file_identifier(file) {\n        const draftItemId = Options.getDraftItemId(this.editor);\n        return draftItemId + '-' + file['filepath'] + '-' + file['filename'];\n    }\n\n    /**\n     * Add Listener to dynamic items in Orphaned-Files-Table e.g. Delete Buttons\n     * @param {array} files The list of files which are display in Orphaned Files Table.\n     */\n    registerListener(files) {\n        files.forEach((file) => {\n            const deleteButton = document.querySelector(`#orphaned-files-${this.elementId} .orphaned-row.${file.className} span`);\n            deleteButton.addEventListener(\"click\", () => {\n                this.deleteSelectedFiles([{'filepath': file.filepath, 'filename': file.filename}]);\n            });\n        });\n        const deleteSelected = document.querySelector(`#orphaned-files-${this.elementId} button.deleteselected`);\n        let selectedFiles = [];\n        deleteSelected.addEventListener(\"click\", () => {\n            for (const file of files) {\n                const select = document.querySelector(`#orphaned-files-${this.elementId} .orphaned-row.${file.className} input`);\n                if (select.checked) {\n                    selectedFiles.push([file]);\n                }\n            }\n            this.deleteSelectedFiles(selectedFiles);\n        });\n    }\n\n}\n"],"names":["constructor","params","editor","elementId","id","editorContainer","draftItemId","userContextId","showReferenceCountEnabled","orphanedFilesCounterOnly","wwwRoot","baseUrl","allFilesSet","Set","usedFilesSet","orphanedFilesSet","deletedFilesSet","oldOrphanedFilesSet","createOrphanedArea","orphanedArea","document","createElement","this","className","after","headerDiv","classList","add","innerHTML","appendChild","bodyDiv","updateAllFiles","Promise","async","resolve","reject","result","getAllDraftFilesInSubdirectories","error","updateUsedFiles","editorContent","getContent","pattern","RegExp","replace","_usedFilesSet","matchAll","map","match","decodeURIComponent","groups","filename","i","file","image_width","image_height","dimensions","dateString","Date","datemodified","toLocaleString","datemodified_formated","has","filepath","updateOrphanedFiles","filter","element","Options","getDraftItemId","fileObject","JSON","parse","files","deleteSelectedFiles","then","_get_file_identifier","update","remove","renderBody","numberoforphanedfiles","size","context","renderForPromise","_ref","html","js","replaceNodeContents","websitesettings","Array","orphanedFiles","from","_ref2","registerListener","catch","forEach","querySelector","addEventListener","deleteSelected","selectedFiles","checked","push"],"mappings":"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"}